RPC API - Действия , Семантика программирования , Высокая связанность , Гибкость , сложная без документации , эти API не публичные.
REST API - Ресурсы , HTTP- Семантика , Низкая связанность , Фокус на CRUD , Легкая в освоении , API публичные

Ендпоинты существуют сами по себе. Активно используются параметры запроса.Игнорируются коды ответа и другие возможности HTTP.

REST API - архитектурный стиль , который заложен в сам протокол HTTP. Создатель сам автор HTTP протокола. 
Этот API использует все возможности HTTP и активно опирается на заголовки , коды ответов и созданные эндпоинты. 
Как пример DummyJson - https://dummyjson.com/ - 
Rest - это использовать API для HTTP. 
----------
Типы запросов: 
GET /users - список юзеров
POST /users - создание юзеров
GET /users/:id - данные юзеров
PATCH/PUT /users/:id - обновление юзеров
DELETE /users/:id - удаление юзеров

REST API - дает лишь адреса и методы HTTP , но не дает информацию о данных в запросах и ответах. Поэтому имеет свои особенности , которые присущи только ему и у него свой способ обработки ошибко и своя структура возвращаемых данных.
Разработчики создают стандарт , которые добавляет в REST все недостающие части. Как пример json:api. - https://jsonapi.org/ - 
json:api - стандарт который описывает конкретные структуры данных для разных типов запросов и ответов. 

Пример ответа:

{
  "type": "photos",
  "id": "1",
  "attributes": {
    "title": "Rails is Omakase"
  },
  "relationships": {
    "author": {
      "links": {
        "self": "/photos/1/relationships/author",
        "related": "/photos/1/author"
      },
      "data": { "type": "people", "id": "9" }
    }
  }
}

-------------------------
RPC API (Remote Procedure Call API) - самый ранний вид API. HTTP тут как способ доставки API , но сам не является частью API.
RPC работает с одним эндпоинтом , как пример /rpc , на который отправляется GET or Post. Использует небольшое кол-во заголовков и кодов ответа. Обработка ошибок и выполнение разных действий в RPC внедрено в само тело запроса и ответа.
RPC просто вызывает обычные функции и делает запросы на внешнюю систему , полностью или частично скрывая существование HTTP и сети в целом.
Запрос в JSON-RPC выглядит как JSON , в котором просто указывается , какую функцию и параметры нужно вызывать. 
Пример запроса:

{
  "jsonrpc": "2.0",
  "method": "subtract",
  "params": { "minuend": 42, "subtrahend": 23 },
  "id": 3
}

Пример ответа: 

{
  "jsonrpc": "2.0", "result": 19, "id": 3
}

